daml 1.2

module Test.Com.Banking.Business.TransferOrder.Service where

import Main.Com.Banking.Business.TransferOrder.Service qualified as TransferOrder
import Main.Com.Banking.Business.TransferOrder.Model qualified as TransferOrder
import Main.Com.Banking.Business.Bank.Service qualified as Bank
import Main.Com.Banking.Business.Account.Service qualified as Account
import Main.Com.Banking.Index.Model
import Main.Com.Banking.Utils.Common
import Test.Com.Banking.Utils.TestUtils

addingMultipleOrders : Scenario ()
addingMultipleOrders = do
    master <- getParty "master"

    (bank, account1, account2) <- bootstrap master

    submit master do
        TransferOrder.createTransferOrder master account1 (id account2) 5.0 ""
        TransferOrder.createTransferOrder master account1 (id account2) 5.0 ""
    pure ()

unableToCreateOrderIfAvailableBalanceInsufficient : Scenario ()
unableToCreateOrderIfAvailableBalanceInsufficient = do
    master <- getParty "master"

    (bank, account1, account2) <- bootstrap master

    order <- submit master do
        TransferOrder.createTransferOrder master account1 (id account2) 5.0 ""
        TransferOrder.createTransferOrder master account1 (id account2) 4.0 "" >>= (fetch . fst)

    submitMustFail master do
        TransferOrder.createTransferOrder master account1 (id account2) 2.0 ""

    submit master do
        TransferOrder.cancelTransferOrder master (id order)
        TransferOrder.createTransferOrder master account1 (id account2) 5.0 ""
    pure ()

executeOrder : Scenario ()
executeOrder = do
    master <- getParty "master"

    (bank, account1, account2) <- bootstrap master

    submit master do
        order <- snd <$> TransferOrder.createTransferOrder master account1 (id account2) 5.0 ""
        [order] === (snd <<$>> TransferOrder.findActiveOrdersByAccount master (id account1))
        TransferOrder.executeOrder master (id order)
        [] === (snd <<$>> TransferOrder.findActiveOrdersByAccount master (id account1))
        [order with state = TransferOrder.Executed] === (snd <<$>> TransferOrder.findExecutedOrdersByAccount master (id account1))

    pure ()

bootstrap master =
    master `submit` do
        bank <- Bank.createBank master "bank1" "0000000"
        account1 <- Account.createAccount master master "account1" "111111" 10.0 bank.bic
        account2 <- Account.createAccount master master "account2" "222222" 10.0 bank.bic
        pure (bank, account1, account2)