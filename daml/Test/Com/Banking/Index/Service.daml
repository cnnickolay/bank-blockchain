daml 1.2

module Test.Com.Banking.Index.Service where

import Main.Com.Banking.Index.Service
import DA.Tuple (thd3)
import Test.Com.Banking.Utils.TestUtils
import Main.Com.Banking.Index.Model

template TestTemplate
  with
    owner : Party
    k : Text
  where
    signatory owner
    key (owner, k) : (Party, Text)
    maintainer key._1

instance IndexKeyConverter TestTemplate Text where
    extractId = const ""

findTest : Scenario ()
findTest = do
    party <- getParty "Party"

    let myKey1 = (Bank, [(All, "")])
        myKey2 = (Account, [(All, "")])

    submit party do
        -- |||| Testing index 1
        -- Index is empty
        None === find_ party myKey1

        -- Adding an element to an empty index
        storeInIndex party myKey1 "11"
        Some ["11"] === find_ party myKey1

        -- Adding same key won't change index
        storeInIndex party myKey1 "11"
        Some ["11"] === (find_ party myKey1)

        -- Adding another key to an existing index
        storeInIndex party myKey1 "22"
        Some ["11", "22"] === find_ party myKey1
        --------------------------------------------

        -- |||| Testing index 2
        -- Index is empty
        None === find_ party myKey2

        -- Adding an element to an empty index
        storeInIndex party myKey2 "11"
        Some ["11"] === find_ party myKey2

        -- Adding same key won't change index
        storeInIndex party myKey2 "11"
        Some ["11"] === find_ party myKey2

        -- Adding another key to an existing index
        storeInIndex party myKey2 "22"
        Some ["11", "22"] === find_ party myKey2
        --------------------------------------------

        -- |||| Deleting from index
        dropFromIndex party myKey1 "11"
        Some ["22"] === find_ party myKey1

        dropFromIndex party myKey1 "22"
        None === find_ party myKey1

template instance RecordText = Record Text

find_ : Party -> IndexKey -> Update (Optional [Text])
find_ party a = fmap thd3 <$> findInIndex party a
