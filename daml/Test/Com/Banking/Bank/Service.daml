daml 1.2

module Test.Com.Banking.Bank.Service where

import Main.Com.Banking.Bank.Service qualified as Bank
import Main.Com.Banking.Bank.Model qualified as Bank
import Main.Com.Banking.Bank.Controller qualified as Bank
import Test.Com.Banking.Utils.TestUtils

bankCreationTest : Scenario ()
bankCreationTest = do
    creator <- getParty("creator")
    owner <- getParty("bankOwner")

    -- bank creation
    submit creator do
        Bank.BankCreated bank <- Bank.createBank creator $ Bank.CreateBank owner "test bank" "bic"
        assertMsg "Unexpected bank stored" $ bank == (Bank.Model creator "test bank" "bic")
        None !== lookupByKey @Bank.Model (creator, "bic")
        None !== lookupByKey @Bank.Controller (creator, "bic")
        [bank] === (Bank.getAllBanks creator)

    -- bank deletion
    submit creator do
        Bank.BankDeleted bank <- Bank.deleteBank creator $ Bank.DeleteBank creator "bic"
        None === lookupByKey @Bank.Model (creator, "bic")
        None === lookupByKey @Bank.Controller (creator, "bic")
        [] === (Bank.getAllBanks creator)

accountCreationTest : Scenario ()
accountCreationTest = do
    creator <- getParty "creator"
    bankOwner <- getParty "bankOwner"
    accountOwner <- getParty "accountOwner"

    bankController <- submit creator do
        Bank.createBank creator $ Bank.CreateBank bankOwner "test bank" "bic"
        fst <$> fetchByKey @Bank.Controller (creator, "bic")

    pure ()