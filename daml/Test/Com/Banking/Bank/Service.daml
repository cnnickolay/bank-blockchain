daml 1.2

module Test.Com.Banking.Bank.Service where

import Main.Com.Banking.Bank.Service qualified as Bank
import Main.Com.Banking.Bank.Model qualified as Bank
import Main.Com.Banking.Bank.Controller qualified as Bank
import Test.Com.Banking.Utils.TestUtils
import Main.Com.Banking.Utils.Common ((<<$>>))
import Main.Com.Banking.Account.Service qualified as Account

bankCreationTest : Scenario ()
bankCreationTest = do
    creator <- getParty("creator")
    owner <- getParty("bankOwner")

    -- bank creation
    submit creator do
        Bank.BankCreated bank <- Bank.createBank creator $ Bank.CreateBank owner "test bank" "bic"
        assertMsg "Unexpected bank stored" $ bank == (Bank.Model creator "test bank" "bic")
        None !== lookupByKey @Bank.Model (creator, "bic")
        None !== lookupByKey @Bank.Controller (creator, "bic")
        [bank] === (snd <<$>> (Bank.findAllBanks creator))

    -- bank deletion
    submit creator do
        Bank.BankDeleted bank <- Bank.deleteBank creator $ Bank.DeleteBank creator "bic"
        None === lookupByKey @Bank.Model (creator, "bic")
        None === lookupByKey @Bank.Controller (creator, "bic")
        [] === (snd <<$>> (Bank.findAllBanks creator))

shouldNotBeAbleToDeleteBankIfAccountExists : Scenario ()
shouldNotBeAbleToDeleteBankIfAccountExists = do
    creator <- getParty("creator")
    bankOwner <- getParty("bankOwner")
    accountOwner <- getParty("bankOwner")

    -- bank creation
    bank <- submit creator do
        Bank.BankCreated bank <- Bank.createBank creator $ Bank.CreateBank bankOwner "test bank" "bic"
        pure bank

    account <- submit bankOwner do
        Account.AccountCreated account <- Account.createAccount bankOwner $ Account.AccountCreate accountOwner "account" "1111111" 5.0 bank.bic
        [account] === (snd <<$>> Account.findAccountsByBank bankOwner "bic")
        pure account

    -- can't delete bank if accounts exist
    submitMustFail bankOwner do
        Bank.deleteBank creator $ Bank.DeleteBank creator "bic"