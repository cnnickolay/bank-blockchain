daml 1.2

module Main.Com.Banking.Business.Bank.Service where

import Main.Com.Banking.Business.Bank.Model qualified as Bank
import Main.Com.Banking.Business.Bank.Persistence qualified as Bank
import Main.Com.Banking.Business.Account.Service qualified as Account

createBank : Party -> Text -> Bank.K -> Update Bank.T
createBank creator name bic = do
    let bank = Bank.Model with owner = creator, name, bic
    response <- Bank.saveBank creator bank *> (pure bank)
    pure response

deleteBank : Party -> Bank.K -> Update Bank.T
deleteBank creator bic = do
    accounts <- Account.findAccountsByBank creator bic
    case accounts of
        [] -> do
            (bankCId, bank) <- fetchByKey @Bank.Model (creator, bic)
            Bank.dropBank creator bank
            -- archive controllerId
            pure bank
        _ -> abort "Unable to delete bank when accounts still present"

findAllBanks = Bank.findAllBanks
