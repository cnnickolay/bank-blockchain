daml 1.2

module Main.Com.Banking.Business.Bank.Service where

import Main.Com.Banking.Business.TransferOrder.Model qualified as TransferOrder
import Main.Com.Banking.Business.TransferOrder.Service qualified as TransferOrder
import Main.Com.Banking.Business.Bank.Model qualified as Bank
import Main.Com.Banking.Business.Bank.Persistence qualified as Bank
import Main.Com.Banking.Business.Account.Service qualified as Account
import Main.Com.Banking.Index.Model
import Main.Com.Banking.Utils.Logger

createBank : Party -> Text -> Bank.K -> Update Bank.T
createBank creator name bic = do
    let bank = Bank.Model with owner = creator, name, bic
    response <- Bank.saveBank creator bank *> (pure bank)
    pure response

deleteBank : Party -> Bank.K -> Update Bank.T
deleteBank creator bic = do
    accounts <- Account.findAccountsByBank creator bic
    case accounts of
        [] -> do
            (bankCId, bank) <- fetchByKey @Bank.Model (creator, bic)
            Bank.dropBank creator bank
            -- archive controllerId
            pure bank
        _ -> abort "Unable to delete bank when accounts still present"

findAllBanks = Bank.findAllBanks

settlePendingTransferOrders : Party -> Bank.K -> Update [TransferOrder.T]
settlePendingTransferOrders party bank = do
    accounts <- fmap ((\acct -> (acct.accountOwner, id acct)) . snd) <$> Account.findAccountsByBank party bank
    transferOrders <- concat <$> mapA (uncurry TransferOrder.findActiveOrdersByAccount) accounts
    -- log party $ "Total active orders: " <> show (length transferOrders)
    log party $ "Party is: " <> show party
    pure []
--     accountPartiesAndOrders <- mapA accountParty activeOrders
--     mapA (uncurry TransferOrder.executeOrder) accountPartiesAndOrders
--   where
--     accountParty order = ((,id order) . (.accountOwner) . snd) <$> (Account.findAccount party order.fromAccount)
