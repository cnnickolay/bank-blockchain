daml 1.2

module Main.Com.Banking.Business.TransferOrder.Service where

import Main.Com.Banking.Business.TransferOrder.Model qualified as TransferOrder
import Main.Com.Banking.Business.TransferOrder.Persistence qualified as TransferOrder
import Main.Com.Banking.Business.Account.Model qualified as Account
import Main.Com.Banking.Business.Account.Persistence qualified as Account
import DA.Action (unless)
import Main.Com.Banking.Utils.Sequence qualified as Seq
import Main.Com.Banking.Index.Model

createTransferOrder : Party -> Account.T -> Account.K -> Decimal -> Text -> Update (ContractId TransferOrder.T, TransferOrder.T)
createTransferOrder party fromAccount toAccountId amount description = do
    let bankOwner = fromAccount.bankOwner
    availableBalance <- availableBalance bankOwner fromAccount
    unless (availableBalance >= amount) $ abort "Insufficient balance"
    nextId <- Seq.nextNumber bankOwner Seq.TransferOrder
    let order = TransferOrder.Model bankOwner party nextId (id fromAccount) toAccountId amount description TransferOrder.Active
    (,order) <$> TransferOrder.saveOrder bankOwner order

availableBalance : Party -> Account.T -> Update Decimal
availableBalance owner account = do
    lockedBalance <- sum . fmap ((.amount) . snd) <$> TransferOrder.findActiveOrdersByAccount owner (id account)
    let availableBalance = account.amount - lockedBalance
    pure availableBalance

cancelTransferOrder : Party -> TransferOrder.K -> Update (ContractId TransferOrder.T)
cancelTransferOrder party transferOrderId = do
    transferOrder <- snd <$> TransferOrder.findOrder party transferOrderId
    TransferOrder.orderCancelled party transferOrder

executeOrder : Party -> TransferOrder.K -> Update TransferOrder.T
executeOrder party transferOrderId =
    findOrder >>= executeOrder >>= incrementToAccount >>= decrementFromAccount
  where
    findOrder = snd <$> TransferOrder.findOrder party transferOrderId
    incrementToAccount order = do
        (toAccountKey, toAccount) <- Account.findAccount party order.toAccount
        archive toAccountKey >> create toAccount with amount = toAccount.amount + order.amount
        pure order
    decrementFromAccount order = do
        (fromAccountKey, fromAccount) <- Account.findAccount party order.fromAccount
        archive fromAccountKey >> create fromAccount with amount = fromAccount.amount - order.amount
        pure order
    executeOrder order = TransferOrder.orderExecuted party order >>= fetch

findActiveOrdersByAccount = TransferOrder.findActiveOrdersByAccount
findExecutedOrdersByAccount = TransferOrder.findExecutedOrdersByAccount