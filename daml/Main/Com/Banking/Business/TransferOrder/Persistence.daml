daml 1.2

module Main.Com.Banking.Business.TransferOrder.Persistence where

import Main.Com.Banking.Business.TransferOrder.Model qualified as TransferOrder
import Main.Com.Banking.Business.Account.Model qualified as Account
import Main.Com.Banking.Index.Model
import Main.Com.Banking.Utils.Persistence

instance IndexedFields TransferOrder.T where
    indexes TransferOrder.Model{fromAccount=(accNum, bic), state} =
      [ accountBankStateIdx (accNum, bic) state
      , bankStateIdx bic state
      ]

accountBankStateIdx (accNum, bic) state = [(AccountNumber, accNum), (BankId, bic), (TransferOrderState, conv state)]
bankStateIdx bic state = [(BankId, bic), (TransferOrderState, conv state)]

conv TransferOrder.Active = "Active"
conv TransferOrder.Cancelled = "Cancelled"
conv TransferOrder.Executed = "Executed"

findActiveOrdersByAccount : Party -> Account.K -> Update [(ContractId TransferOrder.T, TransferOrder.T)]
findActiveOrdersByAccount party accountId = findInIndexAndFetch (accountBankStateIdx accountId TransferOrder.Active) party

findExecutedOrdersByAccount : Party -> Account.K -> Update [(ContractId TransferOrder.T, TransferOrder.T)]
findExecutedOrdersByAccount party accountId = findInIndexAndFetch (accountBankStateIdx accountId TransferOrder.Executed) party

saveOrder : Party -> TransferOrder.T -> Update (ContractId TransferOrder.T)
saveOrder = save_

dropOrder : Party -> TransferOrder.T -> Update ()
dropOrder = drop_

findOrder : Party -> TransferOrder.K -> Update (ContractId TransferOrder.T, TransferOrder.T)
findOrder = find_

orderCancelled : Party -> TransferOrder.T -> Update (ContractId TransferOrder.T)
orderCancelled party order = update_ party order (order with state = TransferOrder.Cancelled)

orderExecuted : Party -> TransferOrder.T -> Update (ContractId TransferOrder.T)
orderExecuted party order = update_ party order (order with state = TransferOrder.Executed)