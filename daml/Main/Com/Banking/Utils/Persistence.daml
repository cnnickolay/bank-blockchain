{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE AllowAmbiguousTypes #-}

daml 1.2

module Main.Com.Banking.Utils.Persistence where

import Main.Com.Banking.Index.Model
import Main.Com.Banking.Index.Service

save_ : (IndexInstance id, IndexedFields model, Eq id, IndexKeyConverter model id) => Party -> model -> Update (ContractId model)
save_ owner a = do
    mapA (\index -> storeInIndex owner (signatory a) index (id a)) indexes_
    create a
  where
    indexes_ = indexes a

drop_ : forall model id. (IndexInstance id, TemplateKey model (Party, id), IndexedFields model, Eq id, IndexKeyConverter model id) => Party -> model -> Update ()
drop_ owner model = dropModel >> dropIndexes >> pure ()
  where
        id_ = id model
        indexes_ = indexes model
        dropModel = ((fst <$> (find_ owner id_)): Update (ContractId model)) >>= archive
        dropIndexes = mapA (dropFromIndex owner id_) indexes_

update_ : forall oldModel newModel id. (IndexInstance id,
                                        TemplateKey oldModel (Party, id),
                                        IndexedFields oldModel, Eq id,
                                        IndexKeyConverter oldModel id,
                                        IndexedFields newModel, Eq id,
                                        IndexKeyConverter newModel id) => Party -> oldModel -> newModel -> Update (ContractId newModel)
update_ owner oldModel newModel = drop_ owner oldModel >> save_ owner newModel

findInIndexAndFetch : (IndexInstance id, IndexKeyConverter model id) => IndexKey -> Party -> Update [(ContractId model, model)]
findInIndexAndFetch indexKey party = allIdsInIndex >>= (\ids -> (mapA $ findContractByKey party) ids)
  where
    allIdsInIndex : (IndexInstance id, IndexKeyConverter model id) => Update [id]
    allIdsInIndex = findInIndex party indexKey

findContractByKey : IndexKeyConverter model id => Party -> id -> Update (ContractId model, model)
findContractByKey party indexValue = find_ party indexValue

find_ : (TemplateKey model (Party, id)) => Party -> id -> Update (ContractId model, model)
find_ party key_ = fetchByKey (party, key_)

