{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE AllowAmbiguousTypes #-}

daml 1.2

module Main.Com.Banking.Utils.Persistence where

import DA.List (delete)
import Main.Com.Banking.Utils.IndexKeys
import DA.Optional (catOptionals)
import Main.Com.Banking.Utils.Logger qualified as Logger

save_ : (IndexedFields model, Eq id, IndexKeyConverter model id) => Party -> model -> Update (ContractId model)
save_ owner a = do
    mapA (\index -> storeInIndex owner index pk) indexes_
    create a
  where
    indexes_ = indexes a
    pk = extractId a

drop_ : forall model id. (TemplateKey model (Party, id), IndexedFields model, Eq id, IndexKeyConverter model id) => Party -> model -> Update ()
drop_ owner model = dropModel >> dropIndexes >> pure ()
  where
        id = extractId model
        indexes_ = indexes model
        dropModel = ((fst <$> (find_ owner id)): Update (ContractId model)) >>= archive
        dropIndexes = mapA (dropFromIndex owner id) indexes_

findInIndexAndFetch : IndexKeyConverter model id => IndexKey -> Party -> Update [(ContractId model, model)]
findInIndexAndFetch indexKey party = allIdsInIndex >>= (\ids -> (mapA $ findContractByKey party) ids)
  where
    allIdsInIndex : IndexKeyConverter model id => Update [id]
    allIdsInIndex = findInIndex party indexKey

findContractByKey : IndexKeyConverter model id => Party -> id -> Update (ContractId model, model)
findContractByKey party indexValue = find_ party indexValue

find_ : (TemplateKey model (Party, id)) => Party -> id -> Update (ContractId model, model)
find_ party key_ = fetchByKey (party, key_)

findInIndex : (IndexKeyConverter model id) => Party -> IndexKey -> Update [id]
findInIndex owner key_ = do
    recordO <- findRecord owner key_
    case recordO of
        None -> do
            Logger.log owner $ "No index found: " <> show key_
            pure []
        Some (id, record) -> do
            Logger.log owner $ "Index found: " <> show key_
            let values = catOptionals $ indexValueToId <$> record.values
            pure values

findRecord : Party -> IndexKey -> Update (Optional (ContractId Record, Record))
findRecord owner key_ = do
    contractId <- lookupByKey @Record (owner, key_)
    case contractId of
        None -> pure None
        Some id -> do
            contract <- fetch id
            pure $ Some (id, contract)

storeInIndex : (TemplateKey model (Party, id), IndexKeyConverter model id, Eq id) => Party -> IndexKey -> id -> Update (Optional (ContractId Record, Record))
storeInIndex owner key_ value = do
    recordO <- findRecord owner key_
    case (recordO, idToIndexValue value) of
        (_, None) -> pure None
        (None, Some indexV) -> log indexV *> saveRecord [indexV] >>= (\cId -> (cId, ) <$> fetch cId) >>= pure . Some
        (Some (recordId, record), Some indexV) | elem indexV record.values -> log indexV *> (pure . Some $ (recordId, record))
        (Some (recordId, record), Some indexV) ->
            log indexV
            *> archive recordId
            >> saveRecord (record.values ++ [indexV])
            >>= (\cId -> (cId, ) <$> fetch cId) >>= pure . Some
  where
    log v = Logger.log owner $ "Storing in index: " <> (show key_) <> " => " <> show v
    saveRecord values = create Record with owner, key_, values = values

dropFromIndex : (IndexKeyConverter m a, Eq a) => Party -> a -> IndexKey -> Update (Optional (ContractId Record, Record))
dropFromIndex owner value key_ = do
    recordO <- findRecord owner key_
    case (recordO, idToIndexValue value) of
        (_, None) -> pure None
        (None, Some _) -> pure None
        (Some (recordId, record), Some indexV) | [v] <- record.values, v == indexV -> archive recordId *> pure None
        (Some (recordId, record), Some indexV) | elem indexV record.values ->
            Some <$>    ( archive recordId
                            >> saveRecord (delete indexV record.values)
                            >>= (\cId -> (cId, ) <$> fetch cId)
                        )
        (Some (recordId, record), Some _) -> pure . Some $ (recordId, record)
  where
    saveRecord values = create Record with owner, key_, values = values
