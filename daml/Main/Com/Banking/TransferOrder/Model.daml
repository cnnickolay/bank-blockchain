daml 1.2

module Main.Com.Banking.TransferOrder.Model where

import Main.Com.Banking.Utils.IndexKeys
import Main.Com.Banking.Account.Model qualified as Account
import DA.Text (parseInt, implode, splitOn)
import DA.List (intersperse)

type T = Model
type K = (Int, Account.K)

data State
  = Active
  | Cancelled
  | Executed
  deriving (Show, Eq)

template Model
  with
    accountOwner: Party
    idx: Int
    fromAccount: Account.K
    toAccount: Account.K
    amount: Decimal
    description: Text
    state: State
  where
    signatory accountOwner
    ensure amount > 0.0
    key (accountOwner, (idx, fromAccount)) : (Party, K)
    maintainer key._1

instance IndexKeyConverter Model K where
    idToIndexValue (idx, accountId) = do
        accountIdIdx <- idToIndexValue accountId
        pure . implode $ intersperse " " ["Idx", show idx, "AccountId", accountIdIdx]
    indexValueToId text = case splitOn " " text of
        "Idx" :: idx :: "AccountId" :: accountId -> (,) <$> parseInt idx <*> indexValueToId (implode . intersperse " " $ accountId)
        _ -> None
    extractId v = (v.idx, v.fromAccount)