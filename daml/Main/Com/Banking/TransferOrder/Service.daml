daml 1.2

module Main.Com.Banking.TransferOrder.Service where

import Main.Com.Banking.TransferOrder.Model qualified as TransferOrder
import Main.Com.Banking.TransferOrder.Persistence qualified as TransferOrder
import Main.Com.Banking.Account.Model qualified as Account
import Main.Com.Banking.Account.Persistence qualified as Account
import DA.Action (unless)
import Main.Com.Banking.Utils.Sequence qualified as Seq

createTransferOrder : Party -> Account.K -> Account.K -> Decimal -> Text -> Update (ContractId TransferOrder.T)
createTransferOrder party fromAccountId toAccountId amount description = do
    availableBalance <- availableBalance party fromAccountId
    unless (availableBalance >= amount) $ abort "Insufficient balance"
    totalPendingOrders <- length <$> TransferOrder.findOrders party fromAccountId
    nextId <- Seq.nextNumber party Seq.TransferOrder
    let order = TransferOrder.Model party nextId fromAccountId toAccountId amount description
    TransferOrder.saveOrder party order

availableBalance : Party -> Account.K -> Update Decimal
availableBalance owner accountId = do
    fromAccount <- snd <$> Account.findAccount owner accountId
    lockedBalance <- sum . (fmap ((.amount) . snd)) <$> TransferOrder.findOrders owner accountId
    let availableBalance = fromAccount.amount - lockedBalance
    pure availableBalance

