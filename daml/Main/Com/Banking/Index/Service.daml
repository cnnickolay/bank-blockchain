{-# LANGUAGE FlexibleContexts #-}

daml 1.2

module Main.Com.Banking.Index.Service where

import Main.Com.Banking.Index.Model
import DA.List (delete)
import Main.Com.Banking.Utils.Logger qualified as Logger

findInIndex : forall id model. (IndexInstance id, IndexKeyConverter model id) => Party -> IndexKey -> Update [id]
findInIndex owner key_ = do
    indexO: Optional (ContractId (Index id), Index id) <- findIndex owner key_
    case indexO of
        None -> do
            Logger.log owner $ "No index found: " <> show key_
            pure []
        Some (_, index) -> do
            Logger.log owner $ "Index found: " <> show key_
            pure index.values

findIndex : forall id. IndexInstance id => Party -> IndexKey -> Update (Optional (ContractId (Index id), Index id))
findIndex owner key_ = do
    contractId <- lookupByKey @(Index id) (owner, key_)
    case contractId of
        None -> pure None
        Some id -> do
            contract <- fetch id
            pure $ Some (id, contract)

storeInIndex : (IndexInstance id, TemplateKey model (Party, id), IndexKeyConverter model id, Eq id)
                => Party -> IndexKey -> id -> Update (Optional (ContractId (Index id), Index id))
storeInIndex owner key_ value = do
    indexO <- findIndex owner key_
    case indexO of
        None -> saveIndex [value] >>= (\cId -> (cId, ) <$> fetch cId) >>= pure . Some
        Some (indexId, index) | elem value index.values -> (pure . Some $ (indexId, index))
        Some (indexId, index) ->
            archive indexId
            >> saveIndex (index.values ++ [value])
            >>= (\cId -> (cId, ) <$> fetch cId) >>= pure . Some
  where
    saveIndex values = create Index with owner, key_, values = values

dropFromIndex : (IndexInstance id, IndexKeyConverter m id, Eq id) => Party -> id -> IndexKey -> Update (Optional (ContractId (Index id), Index id))
dropFromIndex owner value key_ = do
    indexO <- findIndex owner key_
    case indexO of
        None -> pure None
        Some (indexId, index) | [v] <- index.values, v == value -> archive indexId *> pure None
        Some (indexId, index) | elem value index.values ->
            Some <$>    ( archive indexId
                            >> saveIndex owner (delete value index.values)
                            >>= (\cId -> (cId, ) <$> fetch cId)
                        )
        Some (indexId, index) -> pure . Some $ (indexId, index)
  where
    saveIndex owners values = create Index with owner, key_, values = values
