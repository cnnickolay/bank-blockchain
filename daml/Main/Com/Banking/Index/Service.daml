{-# LANGUAGE FlexibleContexts #-}

daml 1.2

module Main.Com.Banking.Index.Service where

import Main.Com.Banking.Index.Model

findInIndex : forall a b. (TypeKey a, TypeKey b) => Party -> a -> Update (Optional (ContractId Record, Record, [b]))
findInIndex owner key_ = do
    let aKey = toKey key_
    contractId <- lookupByKey @Record (owner, aKey)
    case contractId of
        None -> pure None
        Some id -> do
            contract <- fetch id
            let values = fromKey <$> contract.values
            pure $ Some (id, contract, values)

storeInIndex : forall a b. (TypeKey a, TypeKey b, Eq b) => Party -> a -> b -> Update (ContractId Record, Record)
storeInIndex owner key_ value = do
    record: (Optional (ContractId Record, Record, [b])) <- findInIndex owner key_
    case record of
        None -> saveRecord [toKey value]
                >>= (\cId -> (cId, ) <$> fetch cId)
        Some (recordId, record, values) | elem value values -> pure (recordId, record)
        Some (recordId, record, _) ->
            archive recordId
            >> saveRecord (record.values ++ [toKey value])
            >>= (\cId -> (cId, ) <$> fetch cId)
  where
    saveRecord values = create Record with
                    owner
                    key_ = toKey key_
                    values = values
